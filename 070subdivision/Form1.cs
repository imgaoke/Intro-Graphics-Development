using System;
using System.Drawing;
using System.Windows.Forms;
using OpenTK;
using OpenTK.Graphics.OpenGL;
using Scene3D;

namespace _070subdivision
{
  public partial class Form1 : Form
  {
    static readonly string rev = "$Rev$".Split( ' ' )[ 1 ];

    /// <summary>
    /// Scene read from file or generated procedurally.
    /// </summary>
    protected SceneBrep scene = new SceneBrep();

    /// <summary>
    /// Working subdivision instance.
    /// </summary>
    protected Subdivision cn = null;

    /// <summary>
    /// Number of points generated by subdivision procedure.
    /// </summary>
    protected int points = 0;

    /// <summary>
    /// Scene center point.
    /// </summary>
    protected Vector3 center = Vector3.Zero;

    /// <summary>
    /// Scene diameter.
    /// </summary>
    protected float diameter = 4.0f;

    /// <summary>
    /// GLControl guard flag.
    /// </summary>
    bool loaded = false;

    /// <summary>
    /// Are we allowed to use VBO?
    /// </summary>
    bool useVBO = true;

    #region OpenGL globals

    private uint[] VBOid = new uint[ 1 ];       // vertex array (colors, normals, coords)
    private int stride = 0;                     // stride for vertex array

    #endregion

    #region FPS counter

    long lastFpsTime = 0L;
    int frameCounter = 0;
    long pointCounter = 0L;
    double lastFps = 0.0;
    double lastPps = 0.0;

    #endregion

    public Form1 ()
    {
      InitializeComponent();
      Text += " (rev: " + rev + ')';
    }

    private void glControl1_Load ( object sender, EventArgs e )
    {
      loaded = true;

      // OpenGL init code:
      GL.ClearColor( Color.DarkBlue );
      GL.Enable( EnableCap.DepthTest );
      GL.ShadeModel( ShadingModel.Flat );

      // VBO init:
      GL.GenBuffers( 1, VBOid );
      if ( GL.GetError() != ErrorCode.NoError )
        useVBO = false;

      SetupViewport();

      Application.Idle += new EventHandler( Application_Idle );
    }

    private void glControl1_Resize ( object sender, EventArgs e )
    {
      if ( !loaded ) return;

      SetupViewport();
      glControl1.Invalidate();
    }

    private void glControl1_Paint ( object sender, PaintEventArgs e )
    {
      Render();
    }

    private void buttonOpen_Click ( object sender, EventArgs e )
    {
      OpenFileDialog ofd = new OpenFileDialog();

      ofd.Title = "Open Scene File";
      ofd.Filter = "Wavefront OBJ Files|*.obj;*.obj.gz" +
          "|All scene types|*.obj";

      ofd.FilterIndex = 1;
      ofd.FileName = "";
      if ( ofd.ShowDialog() != DialogResult.OK )
      {
        cn = null;
        points = 0;
        return;
      }

      WavefrontObj objReader = new WavefrontObj();
      objReader.MirrorConversion = false;

      int faces = objReader.ReadBrep( ofd.FileName, scene );

      scene.BuildCornerTable();
      diameter = scene.GetDiameter( out center );
      ResetCamera();

      cn = new Subdivision();
      points = cn.Subdivide( scene, (float)numericSubdivision.Value * diameter, checkNormals.Checked, checkColors.Checked, false, 0.0f, textParam.Text );

      labelFile.Text = string.Format( "{0}: {1} f, {2} pts", ofd.SafeFileName, faces, points );

      PrepareDataBuffers();
      glControl1.Invalidate();
    }

    private void buttonGenerate_Click ( object sender, EventArgs e )
    {
      cn = new Subdivision();

      scene.Reset();
      cn.ControlMesh( scene, Matrix4.Identity, 0.0f, textParam.Text );

      Divide();
    }

    /// <summary>
    /// Prepare VBO content and upload it to the GPU.
    /// </summary>
    private void PrepareDataBuffers ()
    {
      if ( useVBO &&
           cn.result != null &&
           cn.result.Vertices > 0 )
      {
        GL.EnableClientState( ArrayCap.VertexArray );
        if ( cn.result.Normals > 0 && checkNormals.Checked )
          GL.EnableClientState( ArrayCap.NormalArray );
        if ( cn.result.Colors > 0 && checkColors.Checked )
          GL.EnableClientState( ArrayCap.ColorArray );

        // Vertex array: [color] [normal] coord
        GL.BindBuffer( BufferTarget.ArrayBuffer, VBOid[ 0 ] );
        int vertexBufferSize = cn.VertexBufferSize( checkNormals.Checked, checkColors.Checked, false );
        GL.BufferData( BufferTarget.ArrayBuffer, (IntPtr)vertexBufferSize, IntPtr.Zero, BufferUsageHint.DynamicDraw );
        IntPtr videoMemoryPtr = GL.MapBuffer( BufferTarget.ArrayBuffer, BufferAccess.WriteOnly );
        unsafe
        {
          stride = cn.FillVertexBuffer( (float*)videoMemoryPtr.ToPointer(), checkNormals.Checked, checkColors.Checked, false );
        }
        GL.UnmapBuffer( BufferTarget.ArrayBuffer );
        GL.BindBuffer( BufferTarget.ArrayBuffer, 0 );
      }
      else
      {
        GL.DisableClientState( ArrayCap.VertexArray );
        GL.DisableClientState( ArrayCap.NormalArray );
        GL.DisableClientState( ArrayCap.ColorArray );

        if ( useVBO )
        {
          GL.BindBuffer( BufferTarget.ArrayBuffer, VBOid[ 0 ] );
          GL.BufferData( BufferTarget.ArrayBuffer, (IntPtr)0, IntPtr.Zero, BufferUsageHint.StaticDraw );
          GL.BindBuffer( BufferTarget.ArrayBuffer, 0 );
        }
      }
    }

    private void Divide ()
    {
      if ( cn == null )
        cn = new Subdivision();

      diameter = scene.GetDiameter( out center );

      scene.BuildCornerTable();

      points = cn.Subdivide( scene, (float)numericSubdivision.Value * diameter, checkNormals.Checked, checkColors.Checked, false, 0.0f, textParam.Text );

      labelFile.Text = string.Format( "{0} v, {1} f, {2} pts", scene.Vertices, scene.Triangles, points );

      PrepareDataBuffers();
      glControl1.Invalidate();
    }

    private void buttonDivide_Click ( object sender, EventArgs e )
    {
      Divide();
    }
  }
}
